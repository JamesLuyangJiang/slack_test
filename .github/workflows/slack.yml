name: Slack Notifications for push and new PR

on:
  pull_request:
    types:
      - opened
      - closed
  push:
    branches:
      - '*'

jobs:
  slack_pr_open:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Slack Notification for Pull Request
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          MESSAGE="New pull request submitted: ${{ github.event.pull_request.html_url }} by ${{ github.event.pull_request.user.login }}"
          MESSAGE="$MESSAGE\nSource Branch: $SOURCE_BRANCH\nTarget Branch: $TARGET_BRANCH"
          SLACK_MESSAGE="{\"text\":\"$MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" $SLACK_WEBHOOK_URL
  
  slack_pr_closed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Slack Notification for Merged Pull Request
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Pull request merged from "$SOURCE_BRANCH" into "$TARGET_BRANCH": ${{ github.event.pull_request.html_url }} by ${{ github.event.pull_request.user.login }}"
          }' $SLACK_WEBHOOK_URL

  slack_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect Data On Push
        if: ${{ github.event_name == 'push' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          PUSH_AUTHOR="${{ github.event.sender.login }}"
          REPOSITORY_NAME="${{ github.repository }}"
          TARGET_BRANCH="${{ github.ref }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_COMMIT_SHA="${COMMIT_SHA::7}"
          
          MESSAGE="$PUSH_AUTHOR has just made a new push to repository: $REPOSITORY_NAME, in branch name: $TARGET_BRANCH, and the commit SHA is $SHORT_COMMIT_SHA."
          SLACK_MESSAGE="{\"text\":\"$MESSAGE\"}"

          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" $SLACK_WEBHOOK_URL

  discord_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16  

      - name: Install Dependencies
        run: npm install discord.js

      - name: Send Notification to Discord
        if: ${{ github.event_name == 'push' }}
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        run: node discordPushNotification.js

  discord_pr_open:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install discord.js
            npm install @actions/github

      - name: Send PR Notification to Discord
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        run: node discordPRNotification.js
